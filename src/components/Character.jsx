/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/character.glb -o src/components/Character.jsx -r public
*/
import React, { useRef, useMemo } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { clone } from 'three/examples/jsm/utils/SkeletonUtils';

export function Character({ color = 'mediumpurple', position, rotation, animation = 'idle' }) {
  const group = useRef();
  const { scene, animations } = useGLTF('/models/character.glb');
  
  // Clone the scene for each instance
  const clonedScene = useMemo(() => {
    const cloned = clone(scene);
    // Apply color to all meshes in the cloned scene
    cloned.traverse((node) => {
      if (node.isMesh && node.material) {
        node.material = node.material.clone();
        node.material.color.set(color);
      }
    });
    return cloned;
  }, [scene, color]);

  // Set up animations
  const { actions } = useAnimations(animations, group);

  // Play the current animation
  React.useEffect(() => {
    if (actions && actions[animation]) {
      const action = actions[animation];
      action.reset().fadeIn(0.2).play();
      return () => action.fadeOut(0.2);
    }
  }, [animation, actions]);

  return (
    <group ref={group} position={position} rotation={rotation} scale={0.18}>
      <primitive object={clonedScene} />
    </group>
  );
}

// Preload the model
useGLTF.preload('/models/character.glb');